<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>KernelSU 喂饭</title>
    <url>/2023/08/23/KernelSU-%E5%96%82%E9%A5%AD/kernelsu-%E5%96%82%E9%A5%AD/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本教程适用与第一次安装<br>不需要任何<code>rec</code>与<code>root</code></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>找到当前的<code>官方boot</code>以备不时之需<br>这里了解如何使用 <code>payload-dumper-go</code> 解包</p>
<h2 id="下载-adb-工具"><a href="#下载-adb-工具" class="headerlink" title="下载 adb 工具"></a>下载 adb 工具</h2><ol>
<li>打开 <a href="https://developer.android.com/studio/releases/platform-tools?hl=zh-cn">https://developer.android.com/studio/releases/platform-tools?hl=zh-cn</a><br> <img src="https://ice.frostsky.com/2023/08/22/86ec1cd4b248a9aa221dbb9b7a79c2e2.png" alt="86ec1cd4b248a9aa221dbb9b7a79c2e2.png"></li>
<li>下载适合自己平台的版本<br> <img src="https://ice.frostsky.com/2023/08/22/d5d24f188596e3c4e5649fedbadd2411.png" alt="d5d24f188596e3c4e5649fedbadd2411.png"><br> <img src="https://ice.frostsky.com/2023/08/22/ace9aab2596131491698c146bc8ae781.png" alt="ace9aab2596131491698c146bc8ae781.png"><br> <img src="https://ice.frostsky.com/2023/08/22/84fc1debff84acf521a6b745a9725e61.png" alt="84fc1debff84acf521a6b745a9725e61.png"></li>
<li>解压</li>
<li>在文件夹中<ol>
<li>按下 <code>ctrl</code> 同时按<code>右键</code>，点击<code>在此处打开终端</code><br>  <img src="https://ice.frostsky.com/2023/08/22/a1d69a719a43b1a45e38a10c98cecd80.png" alt="a1d69a719a43b1a45e38a10c98cecd80.png"></li>
<li>键入 <code>adb version</code> 看看 <code>adb</code> 能否使用<br>  <img src="https://ice.frostsky.com/2023/08/22/be48d7bcf39ea75af3b2cffda4b82d17.png" alt="be48d7bcf39ea75af3b2cffda4b82d17.png"></li>
</ol>
</li>
</ol>
<h2 id="下载适合自己的-kernel-su-boot"><a href="#下载适合自己的-kernel-su-boot" class="headerlink" title="下载适合自己的 kernel su boot"></a>下载适合自己的 <code>kernel su boot</code></h2><ol>
<li>酷安下载 <code>kernel su</code>，其实这个是管理器</li>
<li>打开，查看<code>内核版本</code>，比如我就是 <code>5.15.74-android13-XXXXXXXXX</code><br> <img src="https://ice.frostsky.com/2023/08/22/5e34a5737ad150fef5c5e679326dbc09.jpeg" alt="5e34a5737ad150fef5c5e679326dbc09.jpeg"></li>
<li>打开 <a href="https://github.com/tiann/KernelSU/releases">https://github.com/tiann/KernelSU/releases</a><br> <img src="https://ice.frostsky.com/2023/08/22/e14f3a2196d6e0b7478935b2f222e0d8.png" alt="e14f3a2196d6e0b7478935b2f222e0d8.png"></li>
<li>找到和自己一样的，这里有<strong>3种不同</strong>的<strong>压缩格式</strong>，分别是<code>gz</code>，<code>lz4</code>，<code>不压缩</code><blockquote>
<p>小米一般是<code>不压缩</code>或者<code>gz</code>，<strong>不确定的全部下了</strong></p>
</blockquote>
 <img src="https://ice.frostsky.com/2023/08/22/ab1142f33c3af558fa12c58885d913e6.png" alt="ab1142f33c3af558fa12c58885d913e6.png"></li>
</ol>
<h2 id="手机进入fastboot"><a href="#手机进入fastboot" class="headerlink" title="手机进入fastboot"></a>手机进入<code>fastboot</code></h2><ol>
<li>连接电脑</li>
<li>将刚刚下载文件的解压，把<code>boot镜像</code>复制到<code>adb目录</code>下，<strong>防止出现权限问题</strong></li>
<li>按下 <code>ctrl</code> 同时按<code>右键</code>，点击<code>在此处打开终端</code><ol>
<li>键入 <code>fastboot devices</code> ，检查是否连接<br>  <img src="https://ice.frostsky.com/2023/08/22/6bfe9d67b3fc7d921a0ccd15461b2938.png" alt="6bfe9d67b3fc7d921a0ccd15461b2938.png"></li>
<li>键入 <code>fastboot boot &lt;boot镜像路径&gt;</code>，尝试使用此boot镜像临时启动<br>  <img src="https://ice.frostsky.com/2023/08/22/979d499547f2437026d9a9aceace221c.png" alt="979d499547f2437026d9a9aceace221c.png"></li>
</ol>
</li>
<li>如果手机不能启动，尝试使用另一压缩格式的镜像</li>
</ol>
<h2 id="手机成功启动后"><a href="#手机成功启动后" class="headerlink" title="手机成功启动后"></a>手机成功启动后</h2><ol>
<li>打开 <code>kernel su</code> 管理器<br> <img src="https://ice.frostsky.com/2023/08/22/29b19ba2a9bad95c17fe4656f607a0ae.jpeg" alt="29b19ba2a9bad95c17fe4656f607a0ae.jpeg"></li>
<li>查看是否工作正常</li>
<li>使用一段时间看看手机是否正常</li>
</ol>
<h2 id="确认没有问题后"><a href="#确认没有问题后" class="headerlink" title="确认没有问题后"></a>确认没有问题后</h2><ol>
<li>关机</li>
<li>手机进入<code>fastboot</code></li>
<li>连接电脑</li>
<li>在 <code>adb 文件夹</code>中，按下 <code>ctrl</code> 同时按<code>右键</code>，点击<code>在此处打开终端</code><ol>
<li>键入<code>fastboot devices</code> ，检查是否连接</li>
<li>键入 <code>fastboot flash boot &lt;boot镜像路径&gt;</code>，刷入<code>boot</code><br>  <img src="https://ice.frostsky.com/2023/08/22/3beba36c8554088dfba61fe0b7a3e01a.png" alt="3beba36c8554088dfba61fe0b7a3e01a.png"></li>
<li>键入 <code>fastboot reboot</code>，重启手机</li>
</ol>
</li>
</ol>
<h2 id="成功开机后"><a href="#成功开机后" class="headerlink" title="成功开机后"></a>成功开机后</h2><p><strong>Enjoy</strong></p>
<h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><ol>
<li>需要 <code>roo</code>t 的软件需要<strong>手动</strong>在管理器<strong>授权</strong>，<strong>不会自动弹窗</strong></li>
<li>不需要额外的设置，没有挂载 root 的软件<strong>不会也永远不会</strong>检测到，除非其他玩意漏出了鸡脚</li>
<li>使用 <code>Zygisk - LSPosed</code> 的，建议使用 <code>Shamiko</code> 模块<br> 下载 <a href="https://github.com/LSPosed/LSPosed.github.io/releases">https://github.com/LSPosed/LSPosed.github.io/releases</a></li>
</ol>
<h2 id="模块兼容性指南"><a href="#模块兼容性指南" class="headerlink" title="模块兼容性指南"></a>模块兼容性指南</h2><ol>
<li>至于能不能用需要自己试试，大部分应该是可以的，我自己常用的是可以的</li>
<li>需要使用<code>Zygisk</code> 的模块可以在 <code>Zygisk On KernelSU</code> 模块的支持下工作，比如常见的 <code>Zygisk - LSPosed</code><br> 下载 <a href="https://github.com/Dr-TSNG/ZygiskOnKernelSU">https://github.com/Dr-TSNG/ZygiskOnKernelSU</a></li>
<li>部分振动模块无效（比如小米13的各种振动增强模块）</li>
<li>基本所有字体模块都寄了，除非你开黑名单模式，否则 <code>Shamiko</code> 没用，使用<strong>国内UI</strong>的建议参考 <a href="https://www.coolapk.com/feed/48481298">https://www.coolapk.com/feed/48481298</a> 来操作</li>
</ol>
<h2 id="救砖指南"><a href="#救砖指南" class="headerlink" title="救砖指南"></a>救砖指南</h2><p>看 <a href="https://kernelsu.org/zh_CN/guide/rescue-from-bootloop.html">https://kernelsu.org/zh_CN/guide/rescue-from-bootloop.html</a> 官方说得很详细了<br>截个图偷懒<br><img src="https://ice.frostsky.com/2023/08/22/7290865b67dc04567bd48251083ceb53.png" alt="7290865b67dc04567bd48251083ceb53.png"></p>
<h2 id="如何更新内核"><a href="#如何更新内核" class="headerlink" title="如何更新内核"></a>如何更新内核</h2><blockquote>
<p>默认你已经会如何更新管理器</p>
</blockquote>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>像上面一样<br>下载<code>boot镜像</code>，使用<code>fastboot</code>刷入或者任何的终端</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ol>
<li>下载 Kernel Flasher <a href="https://github.com/capntrips/KernelFlasher">https://github.com/capntrips/KernelFlasher</a></li>
<li>去<code>Kernel SU</code>下载适合自己的<code>AnyKernel3</code>压缩包</li>
<li>打开软件<ol>
<li>找到<strong>已挂载</strong>的分区<br>  <img src="https://ice.frostsky.com/2023/08/22/6a410f97ee20eb58939b4e723d49ff79.jpeg" alt="6a410f97ee20eb58939b4e723d49ff79.jpeg"></li>
<li>点击<code>查看</code></li>
<li>点击<code>刷入</code><br>  <img src="https://ice.frostsky.com/2023/08/22/108ee46125134ef169a1b72ea7ee1d10.jpeg" alt="108ee46125134ef169a1b72ea7ee1d10.jpeg"><br>  <img src="https://ice.frostsky.com/2023/08/22/2d3cba2e5931e6dd1eb90a42a1bbd8d0.jpeg" alt="2d3cba2e5931e6dd1eb90a42a1bbd8d0.jpeg"><br>  <img src="https://ice.frostsky.com/2023/08/22/41a106ae70f82e6cc9c3adf9d5d87574.jpeg" alt="41a106ae70f82e6cc9c3adf9d5d87574.jpeg"></li>
</ol>
</li>
</ol>
<h2 id="更新系统后如何操作"><a href="#更新系统后如何操作" class="headerlink" title="更新系统后如何操作"></a>更新系统后如何操作</h2><ol>
<li>等系统更新完成后，例如出现<strong>提示重启</strong></li>
<li>打开 <code>Kernel Flasher</code><ol>
<li>这时候另一分区会挂载</li>
<li>就像上面更新一样操作就可以了</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>手机</category>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>ROOT</tag>
        <tag>KernelSU</tag>
        <tag>手机</tag>
        <tag>小米</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Arch 安装记录</title>
    <url>/2024/01/10/Arch-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/arch-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实细心的读者已经发现了，和以往的文章不同的是，这次的标题不是以往的“指北”，“喂饭”之类的狂妄自大的玩意儿，而是“记录”这个比较的保守的词语。这样是对于现在的我来说，Linux 整个世界还是很新鲜的，有很多东西不懂，很多东西还没有尝试过，许许多多的坑还没进去过:sunglasses:，所以就现在这点浅薄的知识来说，连群里面的同学都比不过，更何况是依云大佬之类的老油条，所以本文不代表任何权威的做法，仅供参考。</p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>其实吧，我感觉本学期应该是用不上 Linux 的，甚至整个本科都用不上，毕竟所有玩意儿在 Windows 上都能干。但是，一个小小的信息引起了我的注意，一个自动化的同学发了一条朋友圈，吐槽 Ubuntu 装了一晚上才搞定，我一看，虽然我唯一用过 Ubuntu 还是在树莓派上，但是吧，作为最简单的一个发行版 :)，装起来有这么艰难吗？我在晚上小小尝试了一下，发现也不过如此，小小垃圾。然后被自己装的字体折腾了一天，终于找到了原因，原来用户目录下的忘了删。然后就了解到文件系统，发现<code>Ext4</code>就是垃圾，直接用<code>Btrfs</code>，顺便把傻逼<code>Snap</code>扬了，直接<code>Debian</code>走起，然后发现<code>Debian</code>也是个答辩，尤其是那个傻逼的安装界面，居然还有<strong>强制联网</strong>，逆天:rofl:。还有创建分区居然把整个系统装在<code>@rootfs</code>这个玩意儿里面，这下好了，所有小白备份软件都没法用了，懒得调整了。连着看了几天的<code>Arch Wiki</code>之后觉得自己又行了，随便看了B站的视频后，直接开始梭哈，然后就直接掉到一个又一个坑里面，经过两天的不眠之夜，终于可以使用了，顺便提一句，都不知道是不是脑子哪根筋抽了，好好的休息日不搞，直接课堂上开搞。</p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>笔者使用的是笔记本，<code>宏碁 非凡S3 2021</code> <code>11th Intel的核显本</code>。<br>如果笔记本<strong>带独显</strong>的恭喜你，你会遇到更多的坑，尤其是老黄的卡，具体的细节可以看下面的图。</p>
<h2 id="下载-制作-安装盘"><a href="#下载-制作-安装盘" class="headerlink" title="下载 制作 安装盘"></a>下载 制作 安装盘</h2><ol>
<li>没有 <a href="https://www.ventoy.net/cn/index.html">Ventoy</a> 的先去整一个，都3202年了，谁还会天天烧录镜像啊，不烦的吗</li>
<li>在 <a href="https://archlinux.org/download/">Arch的下载界面</a> 下载一个<code>iso镜像</code>，这里使用<code>http镜像站</code>就行，一般的就选<code>阿里</code>，教育网的选就近的高校就行</li>
<li>至于验不验证签名看个人了，反正我是懒得 :)</li>
</ol>
<h2 id="安装前设置"><a href="#安装前设置" class="headerlink" title="安装前设置"></a>安装前设置</h2><ol>
<li>请把安全启动关掉，因为安装完之后用<code>Grub</code>启动会启动不了，当然也有解决方法，但是我一看<code>Wiki</code>上那么多问题就懒得搞了，反正不算什么必须功能，使用<code>Debian</code>和<code>Ubuntu</code>的可以忽略这个，因为他们的<code>Grub</code>改过。</li>
<li>至于什么其他的选项就自己看着办，<code>带独显</code>的建议把独显关了先，免得图形化界面黑屏</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>插u盘，进iso，使用<code>grub2模式</code>来boot，在<code>grub菜单</code>选第一项</li>
<li>根据<a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97#%E9%85%8D%E7%BD%AE%E6%8E%A7%E5%88%B6%E5%8F%B0%E9%94%AE%E7%9B%98%E5%B8%83%E5%B1%80%E5%92%8C%E5%AD%97%E4%BD%93">官方教程</a>，<code>配置控制台键盘布局</code>和字体，<code>验证引导模式</code></li>
<li>就到了<code>配置网络</code>了，连接到互联网<ol>
<li>有<code>有线网</code>的<code>使用网线</code>，是自动的</li>
<li>如果你像我一样，使用的是<code>校园网</code>，无线的情况下，无论是什么认证方式，都建议直接手机或者电脑<code>开热点</code>，因为认证配置起来很麻烦，反正就临时用一下，使用<code>iwctl</code>可很方便的进行配置，跟着<a href="https://wiki.archlinuxcn.org/wiki/Iwd#%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C">官方</a>就行</li>
</ol>
</li>
<li>连好网之后，别傻乎乎的去<code>ping archlinux.org</code>，换成一个国内的网站，比如<code>百度</code></li>
<li><a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97#%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4">更新系统时间</a></li>
<li><code>创建硬盘分区</code>，这里官方的教程比较老，这里我就默认使用的是<code>uefi引导</code>了，毕竟还在使用传统引导的很少见，参考的文章在这里。<a href="https://blog.zrlab.org/posts/arch-btrfs">【使用 Btrfs 安装 Arch Linux】</a><ol>
<li>这里我们需要一个<code>efi分区</code>，用来放<code>内核</code>和<code>引导</code>，只用一个内核大概就需要200m就行，<strong>不建议和windows的放在一起</strong>，因为windows默认就只有100m放进去必爆。这个分区使用的是<code>fat32</code>。</li>
<li>然后是<code>交换分区</code>，其实有没有都没什么所谓，主要是用来<code>休眠</code>用的，和内存一样大就行，使用的是<code>swap</code>。</li>
<li>最后是<code>主分区</code>，因为我使用的<code>btrfs</code>，就直接全分一块了，剩下的空间格式成<code>btrfs</code>。</li>
<li>这里初学者建议使用<code>cfdisk</code>，图形化界面，按照上面的顺序和界面的提示操作就行，操作完成直接记得保存分区表，这里会对新建的分区进行格式化，待会就不需要手动格式化了。</li>
</ol>
</li>
<li>在进行下一步之前我们要来进行一些额外操作，在<code>btrfs分区</code>上建立<code>@</code>和<code>@home</code>子卷，我们不需要像<a href="https://blog.zrlab.org/posts/arch-btrfs">文章</a>里面建立那么多，只整这两主要是像使用自动备份软件。</li>
<li><code>挂载分区</code>，这里可以按照文章里面的来，当然在挂载之前记得在<code>/mnt</code>下面新建对应的文件夹，我这里需要建立<code>/boot</code>和<code>/home</code>，为了防止忘记了分区，这里可以使用<code>lsblk -f</code>来查看整个磁盘的分区，注意，请把笔者的分区换成自己的，然后挂载<code>@</code>到<code>/mnt</code>，<code>@home</code>到<code>/mnt/home</code>，这里的挂载参数可以直接抄，<code>EFI分区</code>到<code>/mnt/boot</code>，启用<code>swap</code>。</li>
<li>开始<code>安装系统</code>，虽然说是自动选择镜像站，但我建议还是手动填算了，国内建议直接阿里，清华，上交，等等，随便填4个就行。</li>
<li><code>安装必需的软件包</code>，根据官方的就行，这里内核建议选择<code>linux-zen</code>，下面的内容里面建议，<code>base-devel</code>，<code>btrfs-progs</code>，<code>sof-firmware</code>，<code>NetworkManager</code>，<code>nano</code>，<code>man-db</code>，<code>man-pages</code>，<code>texinfo</code>，</li>
<li>然后一路向下<br><code>安装引导程序</code>，这里建议的是<code>grub</code>，根据教程来就行，安全启动建议以后再搞<br>一路向下，记得<code>创建用户</code></li>
<li>完成安装过程</li>
</ol>
<h2 id="安装后"><a href="#安装后" class="headerlink" title="安装后"></a>安装后</h2><ol>
<li>这里我先联网，参考这篇文章 <a href="https://juejin.cn/s/archlinux%E8%81%94%E7%BD%91%E8%AE%BE%E7%BD%AE">【archlinux联网设置】</a></li>
<li>更新软件仓库缓存，更新软件</li>
<li>显卡驱动，参考<a href="https://wiki.archlinuxcn.org/wiki/%E5%BB%BA%E8%AE%AE%E9%98%85%E8%AF%BB#%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8">官方教程</a>，千万看仔细，别装错了</li>
<li>安装图形界面，这里我使用的是<code>gnome</code>，使用<code>kde</code>的先别叫</li>
<li>然后<a href="https://wiki.archlinuxcn.org/wiki/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E6%9C%AC%E5%9C%B0%E5%8C%96#%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93">安装一下中文字体</a></li>
<li>设置一下<a href="https://wiki.archlinuxcn.org/wiki/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E6%9C%AC%E5%9C%B0%E5%8C%96#">简体中文本地化</a></li>
<li>设置一下<a href="https://wiki.archlinuxcn.org/wiki/%E5%BB%BA%E8%AE%AE%E9%98%85%E8%AF%BB#%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5">ntp服务</a></li>
<li>重启之后就会进入<code>gnome桌面</code>，这时候你可以进行各种美化，但我建议先整要紧的</li>
<li><a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/">设置archlinuxcn源</a></li>
<li>设置aur助手，笔者使用的是<a href="https://aur.archlinux.org/packages/yay">yay</a>，在archlinuxcn源里面有，直接安装就行</li>
<li><a href="https://wiki.archlinuxcn.org/wiki/%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/%E6%8C%82%E8%B5%B7%E4%B8%8E%E4%BC%91%E7%9C%A0#%E4%BC%91%E7%9C%A0">休眠</a></li>
<li>安装输入法</li>
<li>把缺少的包补全，比如<code>gnome-shell-performance</code>, <code>snapshot</code>, <code>power-profiles-daemon</code></li>
<li>某些软件没法打开，安装<code>qt5-wayland</code>, <code>qt6-wayland</code></li>
<li>obs捕获的是黑屏，安装<code>pipewire-media-session</code></li>
<li><code>chrome</code>没法硬解，使用<code>chromiun-wayland-vaapi</code>，来替代<br><img src="https://i.miji.bid/2024/01/30/3aab50d0fde97058f71701f3a7a49abb.png" alt="3aab50d0fde97058f71701f3a7a49abb.png"></li>
<li>没有办公软件，通讯软件，参考<a href="https://wiki.archlinuxcn.org/wiki/%E5%BB%BA%E8%AE%AE%E9%98%85%E8%AF%BB#%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E7%94%A8%E6%88%B7%E7%9A%84%E6%8E%A8%E8%8D%90%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">官方文章</a>，按需取用</li>
<li><code>gnome</code>用得不爽，参考笔者的插件，部分插件还没有正式支持45，但可以使用ci版，手动安装，更多玩法可以参考这篇文章 <a href="https://jedsek.xyz/posts/desktop-beautify/gnome/">【GNOME 入坑指南】</a><br><img src="https://i.miji.bid/2024/01/30/2cddb274a3f7de51db64d6f101967db1.png" alt="2cddb274a3f7de51db64d6f101967db1.png"><br><img src="https://i.miji.bid/2024/01/30/c12347e07fb3cd5b510bfa236f8c0891.png" alt="c12347e07fb3cd5b510bfa236f8c0891.png"></li>
<li>ntfs挂载不了，参考这篇文章 <a href="https://bbs.archlinux.org/viewtopic.php?id=271650">【[SOLVED]Mounting ntfs partition by ntfs3 failed】</a></li>
<li>如何进行快照，参考 <a href="https://www.bilibili.com/read/cv16725144/">【Linux 的“Time Machine”——利用 Snapper 进行系统备份与恢复】</a></li>
<li>这种系统信息是怎么做的，参考 <a href="https://github.com/dylanaraps/neofetch">【A command-line system information tool written in bash 3.2+】</a><br><img src="https://i.miji.bid/2024/01/30/1a1620df64c4d99577e258f701cc398b.png" alt="1a1620df64c4d99577e258f701cc398b.png"></li>
<li>字体太难看了，换</li>
<li>vs code，字体太难看，自己设置里面调一下</li>
<li>没有休眠按钮，按照这个插件，手动安装 <a href="https://github.com/arelange/gnome-shell-extension-hibernate-status">【Gnome Shell extension that adds a hibernate&#x2F;hybrid suspend button in Status menu.】</a></li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Arch Linux</tag>
        <tag>安装记录</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Report of Campus Network&#39;s WAF in JNU</title>
    <url>/2023/08/30/Report-of-Campus-Network-s-WAF-in-JNU/report-of-campus-network-s-waf-in-jnu/</url>
    <content><![CDATA[<p>默认情况下，DNS由校园网负责，采用cname解析，后缀为jnu.cn</p>
<ul>
<li>谷歌访问正常</li>
<li>GitHub访问正常</li>
<li>YouTube DNS 解析正常，播放封</li>
<li>所有海外im阻断</li>
</ul>
<p>使用自己的DNS进行解析</p>
<ul>
<li>YouTube正常</li>
<li>所有海外im阻断</li>
</ul>
<p>skk解析检测</p>
<ul>
<li>默认DNS，DNS由国内解析，中国电信，国内广东出口，国际香港出口</li>
<li>劫持DNS，DNS由自定义解析，</li>
</ul>
<p>测试出了采用vocom的IPLC或者是IPLE，香港节点<br>所以阻断是在jnu.cn上进行的，排除GFW</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>JNU</tag>
      </tags>
  </entry>
  <entry>
    <title>Python openpyxl 尝试记录</title>
    <url>/2024/01/10/Python-openpyxl-%E5%B0%9D%E8%AF%95%E8%AE%B0%E5%BD%95/python-openpyxl-%E5%B0%9D%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>当时随便写的，找不到最后的代码了，就先这样吧<br>应该不需要注释都看得懂吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml, openpyxl, logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_config</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        config = yaml.load(file, Loader=yaml.FullLoader)</span><br><span class="line">    logging.debug(config)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_price</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        price = yaml.load(file, Loader=yaml.FullLoader)</span><br><span class="line">    logging.debug(price)</span><br><span class="line">    <span class="keyword">return</span> price</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">path, name_col, weight_col</span>):</span><br><span class="line">    wb = openpyxl.load_workbook(path)</span><br><span class="line">    sheet = wb.worksheets[<span class="number">0</span>]</span><br><span class="line">    detial = &#123;&#125;</span><br><span class="line">    name = []</span><br><span class="line">    weight = []</span><br><span class="line">    name_cell = sheet[name_col]</span><br><span class="line">    weight_cell = sheet[weight_col]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> name_cell:</span><br><span class="line">        name.append(i.value)</span><br><span class="line">    <span class="keyword">del</span> name[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> weight_cell:</span><br><span class="line">        weight.append(i.value)</span><br><span class="line">    <span class="keyword">del</span> weight[<span class="number">0</span>]</span><br><span class="line">    detial = <span class="built_in">dict</span>(<span class="built_in">zip</span>(name, weight))</span><br><span class="line">    logging.debug(detial)</span><br><span class="line">    detial = (&#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> detial.items() <span class="keyword">if</span> v <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>&#125;)</span><br><span class="line">    total = <span class="built_in">sum</span>(detial.values())</span><br><span class="line">    logging.debug(total)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> detial.keys():</span><br><span class="line">        detial[i] = (detial[i], i.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>])</span><br><span class="line">        logging.debug(detial)</span><br><span class="line">    <span class="keyword">return</span> detial, total</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_process</span>(<span class="params">price_list, detial, total, real_weight, al_price</span>):</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> detial.keys():</span><br><span class="line">        process_fee = price_list[detial[i][<span class="number">1</span>]]</span><br><span class="line">        result[i] = (i, detial[i][<span class="number">0</span>], total, detial[i][<span class="number">0</span>] / total, real_weight, real_weight * detial[i][<span class="number">0</span>] / total, al_price, process_fee, detial[i][<span class="number">1</span>], (al_price + process_fee) * real_weight * detial[i][<span class="number">0</span>] / total / <span class="number">1000</span>)</span><br><span class="line">    logging.debug(result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_result</span>(<span class="params">result, path</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    logging.basicConfig(level=logging.DEBUG, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>, filename=<span class="string">&#x27;./20230930/debug.log&#x27;</span>)</span><br><span class="line">    logging.debug(<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">    logging.info(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">    logging.warning(<span class="string">&#x27;warning&#x27;</span>)</span><br><span class="line">    logging.error(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    price = load_price(<span class="string">r&quot;测试\价格表.yaml&quot;</span>)</span><br><span class="line">    data = get_data(<span class="string">r&quot;测试\销售订单9-28货拉拉06 的副本.xlsx&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;L&quot;</span>)</span><br><span class="line">    result = data_process(price, data[<span class="number">0</span>], data[<span class="number">1</span>], <span class="number">777.8</span>, <span class="number">19870</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(i, result[i])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>openpyxl</tag>
        <tag>办公自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code C语言编译环境配置</title>
    <url>/2023/09/18/VS-Code-C%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/vs-code-c%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章在<code>CodeGeeX</code>的辅助下编写<br>最近在学C语言，在VS Code上配置C语言编译环境，记录一下。<br>笔者是根据微软官方的教程来配置的，所以教程中的部分内容可能与网上的不同。<br>使用此教程请保证网络通畅，笔者的网络环境为校园网，故在配置过程中遇到问题，请检查网络环境。</p>
<h2 id="安装-C-C-扩展"><a href="#安装-C-C-扩展" class="headerlink" title="安装 C&#x2F;C++ 扩展"></a>安装 C&#x2F;C++ 扩展</h2><p>在扩展商店中搜索 <code>C/C++</code> 并安装。</p>
<h2 id="以上都是废话，笔者懒，还是翻译官方文档算了"><a href="#以上都是废话，笔者懒，还是翻译官方文档算了" class="headerlink" title="以上都是废话，笔者懒，还是翻译官方文档算了"></a>以上都是废话，笔者懒，还是翻译官方文档算了</h2><hr>
<blockquote>
<p>原文链接 ：<a href="https://code.visualstudio.com/docs/languages/cpp">C&#x2F;C++ for Visual Studio Code</a></p>
</blockquote>
<h2 id="C-C-for-Visual-Studio-Code-用于-Visual-Studio-Code-的-C-C"><a href="#C-C-for-Visual-Studio-Code-用于-Visual-Studio-Code-的-C-C" class="headerlink" title="C&#x2F;C++ for Visual Studio Code  &#x2F; 用于 Visual Studio Code 的 C&#x2F;C++"></a>C&#x2F;C++ for Visual Studio Code  &#x2F; 用于 Visual Studio Code 的 C&#x2F;C++</h2><p>C&#x2F;C++ support for Visual Studio Code is provided by a Microsoft C&#x2F;C++ extension to enable cross-platform C and C++ development on Windows, Linux, and macOS. When you create a *.cpp file, the extension adds features such as syntax highlighting (colorization), smart completions and hovers (IntelliSense), and error checking.</p>
<p>微软 Visual Studio Code C&#x2F;C++ 扩展为 Windows、Linux 和 macOS 上的跨平台 C 和 C++ 开发提供了支持。当你创建一个 <code>.cpp</code> 文件时，扩展会添加诸如语法高亮（着色）、智能补全和悬停（IntelliSense）以及错误检查等功能。</p>
<p><img src="https://i.mji.rip/2023/09/21/4adf8f16c9c184fefacff37962c46fd0.png"></p>
<h3 id="Install-the-extension-安装扩展"><a href="#Install-the-extension-安装扩展" class="headerlink" title="Install the extension &#x2F; 安装扩展"></a>Install the extension &#x2F; 安装扩展</h3><ol>
<li>Open VS Code.    &#x2F; 打开 VS Code</li>
<li>Select the Extensions view icon on the Activity bar or use the keyboard shortcut (<code>Ctrl+Shift+X</code>).   &#x2F; 点击活动栏中的扩展视图图标或使用快捷键（<code>Ctrl+Shift+X</code>）</li>
<li>Search for <code>C++</code>.    &#x2F; 搜索 <code>C++</code></li>
<li>Select Install.   &#x2F; 选择安装</li>
</ol>
<p><img src="https://i.mji.rip/2023/09/21/ee61da0b39c6eeebb550f000263dabc6.png"></p>
<h3 id="Set-up-your-C-Environment-设置-C-环境"><a href="#Set-up-your-C-Environment-设置-C-环境" class="headerlink" title="Set up your C++ Environment &#x2F; 设置 C++ 环境"></a>Set up your C++ Environment &#x2F; 设置 C++ 环境</h3><p>C++ is a compiled language meaning your program’s source code must be translated (compiled) before it can be run on your computer. The C&#x2F;C++ extension doesn’t include a C++ compiler or debugger, since VS Code as an editor relies on command-line tools for the development workflow. You need to install these tools or use the tools already installed on your computer.</p>
<p>C++ 是一种编译型语言，这意味着程序源代码必须先翻译（编译）才能在计算机上运行。C&#x2F;C++ 扩展不会包含 C++ 编译器或调试器，因为 VS Code 作为编辑器依赖于命令行工具进行开发工作流。你需要安装这些工具或使用计算机上已安装的工具。</p>
<h3 id="Check-if-you-have-a-compiler-installed-检查是否已安装编译器"><a href="#Check-if-you-have-a-compiler-installed-检查是否已安装编译器" class="headerlink" title="Check if you have a compiler installed &#x2F; 检查是否已安装编译器"></a>Check if you have a compiler installed &#x2F; 检查是否已安装编译器</h3><blockquote>
<p>Note: There may already be a C++ compiler and debugger provided by your academic or work development environment. Check with your instructors or colleagues for guidance on installing the recommended C++ toolset (compiler, debugger, project system, linter).</p>
</blockquote>
<blockquote>
<p>注意：你可能已经从学习或工作开发环境中获得了一个 C++ 编译器与调试器。请与你的导师或同事联系以获取推荐的 C++ 工具集（编译器、调试器、项目系统、Linter）的安装指南。</p>
</blockquote>
<p>Common compilers that already come preinstalled on some platforms are the <a href="https://wikipedia.org/wiki/GNU_Compiler_Collection">GNU Compiler Collection</a> (GCC) on Linux and the <a href="https://wikipedia.org/wiki/Clang">Clang</a> tools with <a href="https://developer.apple.com/xcode/">Xcode</a> on macOS. &#x2F; 常见平台上的预安装编译器是 Linux 上的 GNU 编译器集合（GCC）和 macOS 上的 Clang 工具。</p>
<p>To check if you already have them installed: &#x2F; 检查是否已安装它们：</p>
<ol>
<li><p>Open a new VS Code terminal window using (Ctrl+Shift+`) &#x2F; 打开一个新 VS Code 终端窗口（Ctrl+Shift+&#96;）。</p>
</li>
<li><p>Use the following command to check for the GCC compiler <code>g++</code>: &#x2F; 使用以下命令检查 GCC 编译器 <code>g++</code>：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ --version</span><br></pre></td></tr></table></figure>
<p> Or this command for the Clang compiler <code>clang</code>: &#x2F; 或者这个命令检查 Clang 编译器 <code>clang</code>：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clang --version</span><br></pre></td></tr></table></figure></li>
</ol>
<p>The output should show you the compiler version and details. If neither are found, make sure your compiler executable is in your platform path (<code>%PATH</code> on Windows, <code>$PATH</code> on Linux and macOS) so that the C&#x2F;C++ extension can find it. Otherwise, use the instructions in the section below to install a compiler. </p>
<p>输出应显示编译器的版本和详细信息。如果没有找到，请确保编译器可执行文件已添加到平台路径（Windows 上为 <code>%PATH</code>，Linux 上为 <code>$PATH</code>，macOS 上为 <code>%PATH</code>）。否则，请使用下面的部分中的安装编译器说明。</p>
<h3 id="Install-a-compiler-安装编译器"><a href="#Install-a-compiler-安装编译器" class="headerlink" title="Install a compiler &#x2F; 安装编译器"></a>Install a compiler &#x2F; 安装编译器</h3><p>If you don’t have a compiler installed, you can follow one of our installation tutorials: &#x2F; 如果尚未安装编译器，可以遵循我们的安装教程：</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows:"></a>Windows:</h4><p><a href="https://code.visualstudio.com/docs/cpp/config-msvc#_prerequisites">MSVC 教程</a><br><a href="https://code.visualstudio.com/docs/cpp/config-mingw#_prerequisites">MinGW 教程</a></p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux:"></a>Linux:</h4><p><a href="https://code.visualstudio.com/docs/cpp/config-linux#_gcc">GCC 教程</a></p>
<h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS:"></a>macOS:</h4><p><a href="https://code.visualstudio.com/docs/cpp/config-clang#_prerequisites">Clang 教程</a></p>
<blockquote>
<p>Note: If you would prefer a full Integrated Development Environment (IDE), with built-in compilation, debugging, and project templates (File &gt; New Project), there are many options available, such as the <a href="https://visualstudio.microsoft.com/vs/community">Visual Studio Community</a> edition.</p>
</blockquote>
<blockquote>
<p>注意：如果您想使用内置编译、调试和项目模板（文件 &gt; 新建项目）功能的集成开发环境，则有很多软件可选，例如 <a href="https://visualstudio.microsoft.com/vs/community">Visual Studio Community</a> 。</p>
</blockquote>
<h3 id="Example-Install-MinGW-x64-on-Windows-例子：在-Windows-上安装-MinGW-x64"><a href="#Example-Install-MinGW-x64-on-Windows-例子：在-Windows-上安装-MinGW-x64" class="headerlink" title="Example: Install MinGW-x64 on Windows &#x2F; 例子：在 Windows 上安装 MinGW-x64"></a>Example: Install MinGW-x64 on Windows &#x2F; 例子：在 Windows 上安装 MinGW-x64</h3><p>To understand the process, let’s install Mingw-w64 via MSYS2. Mingw-w64 is a popular, free toolset on Windows. It provides up-to-date native builds of GCC, Mingw-w64, and other helpful C++ tools and libraries.</p>
<p>为了理解过程，让我们通过 MSYS2 安装 Mingw-w64。Mingw-w64 是 Windows 上流行的免费工具集。它提供了最新的本地构建的 GCC、Mingw-w64 和其他有用的 C++ 工具和库。</p>
<ol>
<li><p>Download using <a href="https://github.com/msys2/msys2-installer/releases/download/2023-05-26/msys2-x86_64-20230526.exe">this direct link to the MinGW installer</a>. &#x2F; 使用此<a href="https://github.com/msys2/msys2-installer/releases/download/2023-05-26/msys2-x86_64-20230526.exe">直接链接下载 MinGW 安装程序</a>。</p>
</li>
<li><p>Run the installer and follow the steps of the installation wizard. Note, MSYS2 requires 64 bit Windows 8.1 or newer. &#x2F; 运行安装程序并按照安装向导中的步骤进行操作。请注意，MSYS2 要求 Windows 8.1 或更高版本的 64 位 Windows。</p>
</li>
<li><p>In the wizard, choose your desired Installation Folder. Record this directory for later. In most cases, the recommended directory is acceptable. The same applies when you get to setting the start menu shortcuts step. When complete, ensure the Run MSYS2 now box is checked and select Finish. A MSYS2 terminal window will then automatically open. &#x2F; 在向导中，选择所需的安装目录。记录此目录以供以后使用。在大多数情况下，建议的目录是可接受的。当完成设置启动菜单快捷方式时，请确保选择“现在运行 MSYS2”框，然后选择完成。然后，将自动打开 MSYS2 终端窗口。</p>
</li>
<li><p>In this terminal, install the MinGW-w64 toolchain by running the following command: &#x2F; 在此终端中，通过运行以下命令安装 MinGW-w64 工具链：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain</span><br></pre></td></tr></table></figure></li>
<li><p>Accept the default number of packages in the <code>toolchain</code> group by pressing <code>Enter</code>. &#x2F; 接受默认的<code>工具链组</code>中软件包的数量，按 <code>Enter</code> 键。<br><img src="https://i.mji.rip/2023/09/21/6eed17155d6e0b33e17231472d1c6c5a.png"></p>
</li>
<li><p>Enter <code>Y</code> when prompted whether to proceed with the installation. &#x2F; 提示是否继续安装时，输入 <code>Y</code>。</p>
</li>
<li><p>Add the path to your MinGW-w64 <code>bin</code> folder to the Windows <code>PATH</code> environment variable by using the following steps: &#x2F;<br>使用以下步骤将 MinGW-w64 <code>bin</code> 文件夹的路径添加到 Windows <code>PATH</code> 环境变量：</p>
<ol>
<li>In the Windows search bar, type <code>Settings</code> to open your Windows Settings. &#x2F;<br> 在 Windows 搜索栏中，键入 <code>设置</code> 打开 Windows 设置。</li>
<li>Search for <code>Edit environment variables for your account</code>. &#x2F;<br> 搜索 <code>编辑你的账户的环境变量</code>。</li>
<li>In your User variables, select the <code>Path</code> variable and then select <code>Edit</code>. &#x2F;<br> 在用户变量中，选择 <code>Path</code> 变量，然后选择 <code>编辑</code>。</li>
<li>Select <code>New</code> and add the MinGW-w64 destination folder you recorded during the installation process to the list. If you selected the default installation steps, the path is: <code>C:\msys64\ucrt64\bin</code>. &#x2F;<br> 选择 <code>新建</code>，并添加安装过程中记录的 MinGW-w64 目标文件夹到列表中。如果你选择了默认的安装步骤，路径是：C:\msys64\ucrt64\bin。</li>
<li>Select <code>OK</code> to save the updated <code>PATH</code>. For the new <code>PATH</code> to be available, reopen your console windows. &#x2F;<br> 选择 <code>确定</code> 保存更新后的 <code>PATH</code>。新的 <code>PATH</code> 生效需要重新打开控制台窗口。</li>
</ol>
</li>
<li><p>Check that your MinGW-w64 tools are correctly installed and available, open a <code>new</code> Command Prompt and type: &#x2F;<br>检查 MinGW-w64 工具是否正确安装，打开一个<code>新的</code>命令窗口，输入：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br><span class="line">g++ --version</span><br><span class="line">gdb --version</span><br></pre></td></tr></table></figure>
<p>You should see output that states which versions of GCC, g++ and GDB you have installed. If this is not the case, make sure your PATH entry matches the Mingw-w64 binary location where the compiler tools are located or reference the <a href="https://code.visualstudio.com/docs/cpp/config-mingw#__check-your-mingw-installation">troubleshooting section</a>.</p>
</li>
</ol>
<p>你应该看到输出，显示出你安装的 GCC、g++ 和 GDB 的版本。如果不是，请确保 PATH 入口与编译器工具所在位置的 Mingw-w64 二进制文件匹配，或者参考<a href="https://code.visualstudio.com/docs/cpp/config-mingw#__check-your-mingw-installation">故障排除部分</a>。</p>
<hr>
<h2 id="好了，笔者摸鱼回来了"><a href="#好了，笔者摸鱼回来了" class="headerlink" title="好了，笔者摸鱼回来了"></a>好了，笔者摸鱼回来了</h2><h3 id="配置任务"><a href="#配置任务" class="headerlink" title="配置任务"></a>配置任务</h3><h3 id="运行生成任务"><a href="#运行生成任务" class="headerlink" title="运行生成任务"></a>运行生成任务</h3>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>VS Code</tag>
        <tag>编译环境</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/24/hello-world/hello-world/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<p>这是官方自带的文章，为了纪念一下，所以我给这玩意来一下翻译，作为留念</p>
</blockquote>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<blockquote>
<p>译文：欢迎使用 <a href="https://hexo.io/">Hexo</a> ！这是你的第一篇文章。查看 <a href="https://hexo.io/docs/">文档</a> 来获取更多信息。如果在使用 Hexo 的过程中遇到任何问题，你可以在 <a href="https://hexo.io/docs/troubleshooting.html">遇到问题？</a> 寻找答案，或者在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 上叫我。</p>
</blockquote>
<h2 id="Quick-Start-快速开始"><a href="#Quick-Start-快速开始" class="headerlink" title="Quick Start 快速开始"></a>Quick Start 快速开始</h2><h3 id="Create-a-new-post-新建文章"><a href="#Create-a-new-post-新建文章" class="headerlink" title="Create a new post 新建文章"></a>Create a new post 新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<blockquote>
<p>更多信息：<a href="https://hexo.io/docs/writing.html">写作</a></p>
</blockquote>
<h3 id="Run-server-运行服务器"><a href="#Run-server-运行服务器" class="headerlink" title="Run server 运行服务器"></a>Run server 运行服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<blockquote>
<p>更多信息：<a href="https://hexo.io/docs/server.html">服务器</a></p>
</blockquote>
<h3 id="Generate-static-files-生成静态文件"><a href="#Generate-static-files-生成静态文件" class="headerlink" title="Generate static files 生成静态文件"></a>Generate static files 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<blockquote>
<p>更多信息：<a href="https://hexo.io/docs/generating.html">生成</a></p>
</blockquote>
<h3 id="Deploy-to-remote-sites-在远端站点上部署"><a href="#Deploy-to-remote-sites-在远端站点上部署" class="headerlink" title="Deploy to remote sites 在远端站点上部署"></a>Deploy to remote sites 在远端站点上部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<blockquote>
<p>更多信息：<a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>体验MSYS2 - 在Windows上体验Unix终端和软件</title>
    <url>/2024/02/01/%E4%BD%93%E9%AA%8CMSYS2-%E5%9C%A8Windows%E4%B8%8A%E4%BD%93%E9%AA%8CUnix%E7%BB%88%E7%AB%AF%E5%92%8C%E8%BD%AF%E4%BB%B6/%E4%BD%93%E9%AA%8Cmsys2-%E5%9C%A8windows%E4%B8%8A%E4%BD%93%E9%AA%8Cunix%E7%BB%88%E7%AB%AF%E5%92%8C%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>有部分内容是机翻的，想看省流版本的去到结尾</p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为最近闲的没事干，笔者准备写个小脚本来爬蔚蓝档案吧的二创贴，顺便做个监控和排名。但是，当笔者准备打开命令行，新建虚拟环境的时候，发现copy出来的是<code>3.11.7</code>，如果我没记错的话，我的<code>python</code>是跟着<code>winget</code>更新的，最新的应该是<code>3.12.1</code>，虽然就一个小小的版本的区别，我就很奇怪了，在命令行里面<code>where python</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">where</span> python</span><br><span class="line">C:\msys64\ucrt64\bin\python.exe</span><br><span class="line">C:\Users\<span class="number">13059</span>\AppData\Local\Programs\Python\Python312\python.exe</span><br><span class="line">C:\Users\<span class="number">13059</span>\AppData\Local\Microsoft\WindowsApps\python.exe</span><br></pre></td></tr></table></figure>

<p>这就有点意思了，<code>msys2</code>里也装了一个，但我印象里面我也没用过<code>msys2</code>装过<code>python</code>啊，合着上次装工具链的时候一起装的？不过我之前一直用另一台电脑，还真没留意这个东西。</p>
<p>这不是什么大的问题，真正的问题是，Windows下面的环境变量管理实在是逆天，别的系统都是用户配置优先的，到了Windows就是反过来的，系统配置优先？我TM，用户配置里面，我自己装的在<code>msys2</code>的上面，但是，系统配置里面是没有我自己装的，这就引发出个问题，我到底是把用户目录下面的加到系统配置里面呢？还是把<code>python</code>拷贝到其他地方去？如果是第一种方案，就会导致环境配置混乱，第二种方案，不方便更新。可见，Windows下面的运行环境简直就是依托答辩，各种东西到处乱飞。</p>
<p>因为笔者主要还是使用Linux较多，所以决定看看<code>msys2</code>好不好用，看看能不能替代其他玩意作为包管理器和管理运行环境。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>msys2</code>的官方网站上面说的很明白，Windows上的软件分发和构建平台，包含了很多的库和工具，有一个<code>bash终端</code>，和arch一样的<code>pacman</code>包管理器，一些从<code>cygwin</code>项目移植过来的unix工具，还有很多基于Windows的原生预构建软件包，包括了常用的运行环境和工具。</p>
<p>当然，笔者认为以上这对废话初学者大概率都看不懂，简而言之，msys2项目就是让很多的unix软件可以在Windows上运行，或者说将unix软件移植到windows上，并且让你在命令行里面可以用unix的习惯写命令。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>翻译并精简自官方文档</p>
<ol>
<li>下载 安装包 <a href="https://github.com/msys2/msys2-installer/releases/download/2024-01-13/msys2-x86_64-20240113.exe">msys2-x86_64-20240113.exe</a> （系统需要64位 版本8.1以上）<br>这里笔者要提一嘴，这个安装包是写这篇文章时官方给出的最新的，如果以后官方更新了，你用旧的安装包也是没有问题的，在安装完之后可以手动对核心组件进行更新，而且每次检查更新时都会更新核心组件。</li>
<li>双击运行安装，然后全部默认，下一步，直到完成。<br><img src="https://www.msys2.org/images/install-2-path.png" alt="install-2-path"><br><img src="https://www.msys2.org/images/install-3-finish.png" alt="install-3-finish"></li>
<li>现在msys2已经准备就绪，并且会启动一个<code>ucrt64环境</code>的终端。<br><img src="https://www.msys2.org/images/install-4-terminal-dark.png#gh-dark-mode-only" alt="install-4-terminal-dark"></li>
<li>现在你就可以安装各种工具比如<code>mingw-w64 gcc</code>来编译项目，我们来尝试一下。<ol>
<li>输入以下命令安装gcc <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -S mingw-w64-ucrt-x86_64-gcc</span><br></pre></td></tr></table></figure></li>
<li>终端会显示以下内容，按下<code>回车键</code>或者<code>输入y后回车</code>表示继续安装 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resolving dependencies...</span><br><span class="line">      looking <span class="keyword">for</span> conflicting packages...</span><br><span class="line"></span><br><span class="line">      Packages (15) mingw-w64-ucrt-x86_64-binutils-2.41-2</span><br><span class="line">                  mingw-w64-ucrt-x86_64-crt-git-11.0.0.r216.gffe883434-1</span><br><span class="line">                  mingw-w64-ucrt-x86_64-gcc-libs-13.2.0-2  mingw-w64-ucrt-x86_64-gmp-6.3.0-2</span><br><span class="line">                  mingw-w64-ucrt-x86_64-headers-git-11.0.0.r216.gffe883434-1</span><br><span class="line">                  mingw-w64-ucrt-x86_64-isl-0.26-1  mingw-w64-ucrt-x86_64-libiconv-1.17-3</span><br><span class="line">                  mingw-w64-ucrt-x86_64-libwinpthread-git-11.0.0.r216.gffe883434-1</span><br><span class="line">                  mingw-w64-ucrt-x86_64-mpc-1.3.1-2  mingw-w64-ucrt-x86_64-mpfr-4.2.1-2</span><br><span class="line">                  mingw-w64-ucrt-x86_64-windows-default-manifest-6.4-4</span><br><span class="line">                  mingw-w64-ucrt-x86_64-winpthreads-git-11.0.0.r216.gffe883434-1</span><br><span class="line">                  mingw-w64-ucrt-x86_64-zlib-1.3-1  mingw-w64-ucrt-x86_64-zstd-1.5.5-1</span><br><span class="line">                  mingw-w64-ucrt-x86_64-gcc-13.2.0-2</span><br><span class="line"></span><br><span class="line">      Total Download Size:    49.38 MiB</span><br><span class="line">      Total Installed Size:  418.82 MiB</span><br><span class="line"></span><br><span class="line">      :: Proceed with installation? [Y/n]</span><br><span class="line">      [... downloading and installation continues ...]</span><br></pre></td></tr></table></figure></li>
<li>我们来测试一下<code>gcc</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc --version</span><br><span class="line">gcc.exe (Rev2, Built by MSYS2 project) 13.2.0</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>笔者认为官方文档中，这一篇比较重要，关系到很多东西。</p>
<p><code>msys2</code>具有很多不同的<code>环境</code>（笔者注：指<code>命令行环境</code>），所以首先你要做的就是选择使用哪一个。不同的环境之间的区别主要是<code>环境变量</code>，<code>默认的编译器/连接器</code>，<code>处理器架构</code>，<code>使用的系统库</code>等等。如果你不确定使用什么，用<code>ucrt64</code>准没错。</p>
<blockquote>
<p>补充<br>你在<code>应用程序</code>里会看到这几个玩意。<br><img src="https://i.miji.bid/2024/02/01/9e3bd01065c08d9261894b22bf751986.png" alt="9e3bd01065c08d9261894b22bf751986.png"><br>你点进去就会打开一个<code>终端窗口</code>，<code>粉红色</code>的字就是当前的环境。<br><img src="https://www.msys2.org/images/install-4-terminal-dark.png#gh-dark-mode-only" alt="install-4-terminal-dark"></p>
</blockquote>
<p><code>MSYS 环境</code>包含基于<code>类 unix/cygwin</code> 的工具，位于 <code>/usr</code> 下，其特殊之处在于它始终处于活动状态。所有其他环境都继承自 <code>MSYS 环境</code>，并在其之上添加各种内容。</p>
<p>例如，在 <code>UCRT64</code> 环境中，<code>$PATH</code> 变量以 <code>/ucrt64/bin:/usr/bin</code> 开头，因此您可以获得所有基于 <code>ucrt64</code> 的工具以及所有 <code>msys</code> 工具。</p>
<h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><p><img src="https://i.miji.bid/2024/02/01/11cb6103a42cea7f463686c851c2106f.png" alt="11cb6103a42cea7f463686c851c2106f.png"></p>
<h4 id="GCC-还是-LLVM-Clang"><a href="#GCC-还是-LLVM-Clang" class="headerlink" title="GCC 还是 LLVM&#x2F;Clang"></a>GCC 还是 LLVM&#x2F;Clang</h4><p>这些是用在相应存储库中构建所有包的默认编译器&#x2F;工具链。</p>
<p>基于<code>GCC</code>的环境：</p>
<ul>
<li>目前已广泛测试&#x2F;使用</li>
<li><code>Fortran</code> 支持</li>
<li>虽然 <code>MINGW</code> 环境中也存在 <code>Clang</code> 包，但该包仍然使用 <code>GNU 链接器</code>和 <code>GNU C++ 库</code>。在某些情况下，<code>Clang</code> 也用于构建软件包，例如，上游更喜欢 <code>Clang</code> 而不是 <code>GCC</code>。</li>
</ul>
<p>基于<code>LLVM/Clang</code>的环境：</p>
<ul>
<li>仅使用<code>LLVM</code>工具，<code>LLD</code>作为链接器，<code>LIBC++</code>作为C++标准库</li>
<li><code>Clang</code> 提供 ASAN 支持</li>
<li>对 <code>TLS</code>（线程本地存储）的本机支持</li>
<li><code>LLD</code> 比 <code>LD</code> 更快，但不支持 <code>LD</code> 支持的所有功能</li>
<li>某些工具缺乏与等效 GNU 工具相同的功能</li>
<li>支持 <code>Microsoft Windows 10</code> 上的 <code>ARM64/AArch64</code> 架构</li>
</ul>
<h4 id="MSVCRT-还是-UCRT"><a href="#MSVCRT-还是-UCRT" class="headerlink" title="MSVCRT 还是 UCRT"></a>MSVCRT 还是 UCRT</h4><p>这是 <code>Microsoft Windows</code> 上 <code>C 标准库</code>的两个变体。</p>
<p><code>MSVCRT</code>（Microsoft Visual C++ Runtime）默认在所有 <code>Microsoft Windows</code> 版本上可用，但由于向后兼容性问题一直停留在过去，不兼容 C99 并且缺少一些功能。</p>
<ul>
<li>它不兼容 <code>C99</code>，例如 <code>printf()</code> 函数系列，但是……</li>
<li><code>mingw-w64</code> 提供了替换函数，使其在很多情况下兼容 C99</li>
<li>它不支持 <code>UTF-8</code> 区域设置</li>
<li>与 <code>MSVCRT</code> 链接的二进制文件不应与 <code>UCRT</code> 链接的二进制文件混合，因为内部结构和数据类型不同。（更严格地说，为不同目标构建的对象文件或静态库不应混合。为不同 CRT 构建的 DLL 可以混合，只要它们不共享 <code>CRT</code> 对象，例如<code>FILE*</code>跨 <code>DLL 边界</code>。）同样的规则适用于<code>MSVC</code> 编译二进制文件，因为 <code>MSVC</code> 默认使用 <code>UCRT</code>（如果不更改）。</li>
<li>可在 <code>Microsoft Windows</code> 的每个版本上开箱即用。</li>
</ul>
<p><code>UCRT</code>（通用 C 运行时）是一个较新的版本，<code>Microsoft Visual Studio</code> 也默认使用它。它的工作和行为应该就像代码是用 <code>MSVC</code> 编译的一样。</p>
<ul>
<li>在构建时和运行时比 <code>MSVC</code> 具有更好的兼容性。</li>
<li>它作为 <code>Windows 10</code> 或更高版本以及 <code>Windows Server 2016</code> 或更高版本中操作系统的一部分包含在内。对于较旧的 Windows 版本，您必须明确提供它或取决于安装它的用户。有关这方面的更多信息，请参阅<a href="https://learn.microsoft.com/en-us/cpp/windows/universal-crt-deployment">UCRT 部署</a>。</li>
</ul>
<h3 id="添加到终端"><a href="#添加到终端" class="headerlink" title="添加到终端"></a>添加到终端</h3><p>因为笔者只有<code>Windows Terminal</code>，所以只有这个的步骤。</p>
<ol>
<li>打开<code>终端</code>，在下拉选项卡里找到<code>设置</code>。<br><img src="https://i.miji.bid/2024/02/01/5a52b97fdd561f9e5a943c70766d7835.png" alt="5a52b97fdd561f9e5a943c70766d7835.png"></li>
<li>左下角<code>打开json文件</code>。<br><img src="https://i.miji.bid/2024/02/01/eaefa508c56f0c52b340dff4a33742d1.png" alt="eaefa508c56f0c52b340dff4a33742d1.png"></li>
<li>在json文件里找到<code>&quot;profiles&quot;</code>这一行，把配置加到后面<blockquote>
<p>补充：<br>把大括号里面的内容加进去就行。<br>字体和大小可以在<code>设置</code>里面调，比较直观。</p>
</blockquote>
<img src="https://i.miji.bid/2024/02/01/5c80b0c9c5960121e4ff3a7c0e573cc7.png" alt="5c80b0c9c5960121e4ff3a7c0e573cc7.png"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span></span><br><span class="line">  <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UCRT64 / MSYS2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/msys64/msys2_shell.cmd -defterm -here -no-start -ucrt64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;startingDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/msys64/home/%USERNAME%&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/msys64/ucrt64.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> </span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lucida Console&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">12</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MSYS / MSYS2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/msys64/msys2_shell.cmd -defterm -here -no-start -msys&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;startingDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/msys64/home/%USERNAME%&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/msys64/msys2.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> </span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lucida Console&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">12</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="添加到-IDE"><a href="#添加到-IDE" class="headerlink" title="添加到 IDE"></a>添加到 IDE</h3><p>因为笔者只用 VS Code，所以只有这个的。</p>
<ol>
<li>在VS Code的<code>设置</code>里找到下图的位置。<br><img src="https://i.miji.bid/2024/02/01/39d943c375365cfcbd80b318fa8470ae.png" alt="39d943c375365cfcbd80b318fa8470ae.png"></li>
<li>参考下图把这段加进去。<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;MSYS2 UCRT&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;/c&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;C:\\msys64\\msys2_shell.cmd -defterm -here -no-start -ucrt64&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<img src="https://i.miji.bid/2024/02/01/aaf34ea6adabd407e1e6ecff04bf5259.png" alt="aaf34ea6adabd407e1e6ecff04bf5259.png"></li>
</ol>
<h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>基本的操作和arch上的pacman一样，直接去参考就行。</p>
<h4 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h4><p>所有的包都会有一个代表环境的前缀<br><img src="https://i.miji.bid/2024/02/01/94c643a39dec0c465578e8c947d5f33c.png" alt="94c643a39dec0c465578e8c947d5f33c.png"></p>
<h4 id="使用pacboy进行高级搜索"><a href="#使用pacboy进行高级搜索" class="headerlink" title="使用pacboy进行高级搜索"></a>使用pacboy进行高级搜索</h4><ol>
<li>安装pactoys<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -S pactoys</span><br></pre></td></tr></table></figure></li>
<li>使用<code>:p</code>来指定环境，例如<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacboy -S x265:u</span><br></pre></td></tr></table></figure>
具体的后缀可以使用<code>pacboy help</code>查看</li>
</ol>
<h4 id="仓库镜像"><a href="#仓库镜像" class="headerlink" title="仓库镜像"></a>仓库镜像</h4><p>笔者查看了配置文件，个人感觉不需要进行干预，因为里面的镜像网站很齐全。</p>
<h3 id="Git-的问题"><a href="#Git-的问题" class="headerlink" title="Git 的问题"></a>Git 的问题</h3><p>笔者参考了官方的文档后，msys2中，git目前只提供了cygwin的版本，只能支持标准的的unix路径，而且与<code>Git for Windows</code>相比，性能很差，尤其是大型仓库。官方在积极解决这个问题。</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>这里先说结论，外面可以读到msys2安装的环境，msys2不能读外面的，很正常，比较设计就是这样的。</p>
<h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>因为众所周知的原因，Windows就是一个以图形化界面为主的系统。基本没什么人用它的命令行，因为所有工作都可以在图形化界面完成。而Linux不一样，它可以在没有图形化环境的情况下正常使用。然后由于众所周知的原因Linux的桌面环境很难用。你说苹果吧，图形化确实有，命令行确实有，就是没有软件支持。最近个人用得比较舒服的就是Chromebook，可以开Linux虚拟机，图形化界面也处理的好。</p>
<p>MSYS2这个项目一开始给我一种很神奇的感觉，首先它这个移植就很离谱，基本部分是基于cygwin。cygwin这个东西很有意思，用一个动态链接库来处理与POSIX系统调用和环境有关的东西，简单来说就是一个API兼容层。兼容层这个东西会影响一点效率，从Git就可以看出来。所以，MSYS2还包括了一系列的原生构建的软件包，真，从源码构建，直接使用Windows API。MSYS2用Pacman作为包管理器，终于解决了Windows上面没有一个像样的包管理器的问题，各种环境终于不是东一个西一个，还附带了一点滚动更新的优点。自带的bash终端就很有Linux的感觉，	要是你愿意，甚至可以用nano来编辑文件，而且终于不用使用逆天的反斜线写路径了。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MSYS2</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>小米手机解锁喂饭</title>
    <url>/2023/08/23/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E8%A7%A3%E9%94%81%E5%96%82%E9%A5%AD/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E8%A7%A3%E9%94%81%E5%96%82%E9%A5%AD/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><code>设置</code> - <code>我的设备</code> - <code>全部参数与信息</code> - <code>MIUI版本</code>，连点5下</li>
<li><code>设置</code>- <code>更多设置</code> - <code>开发者选项</code> - <code>设备解锁状态</code>，绑定账号与设备</li>
</ol>
<h2 id="等7天"><a href="#等7天" class="headerlink" title="等7天"></a>等7天</h2><h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><h2 id="下载解锁工具"><a href="#下载解锁工具" class="headerlink" title="下载解锁工具"></a>下载解锁工具</h2><ol>
<li>打开 <a href="https://www.miui.com/unlock/index.html">https://www.miui.com/unlock/index.html</a></li>
<li>点击<code>立即解锁</code><br> <img src="https://ice.frostsky.com/2023/08/22/f917918db326ba2bf356e4ca4f0a37d2.png"></li>
<li>点击<code>解锁工具下载</code><br> <img src="https://ice.frostsky.com/2023/08/22/51866c76ac82cd91f994cd5c2684ca5f.png"></li>
</ol>
<h2 id="打开解锁工具"><a href="#打开解锁工具" class="headerlink" title="打开解锁工具"></a>打开解锁工具</h2><ol>
<li>下载后解压<br> <img src="https://ice.frostsky.com/2023/08/22/66173936dc9d25d276d7e00a9e6ab69c.png" alt="66173936dc9d25d276d7e00a9e6ab69c.png"></li>
<li>点击 <code>miflash_unlock.exe</code><br> <img src="https://ice.frostsky.com/2023/08/22/4fe4145b6779c8090d73a3e7e6df4c44.png" alt="4fe4145b6779c8090d73a3e7e6df4c44.png"></li>
<li>待软件打开<br> <img src="https://ice.frostsky.com/2023/08/22/47bd950555a0434b986de5a63128084d.png" alt="47bd950555a0434b986de5a63128084d.png"></li>
<li>登录账号<br> <img src="https://ice.frostsky.com/2023/08/22/5be0f53d04792daeb0c57ece87cea6ba.png" alt="5be0f53d04792daeb0c57ece87cea6ba.png"></li>
</ol>
<h2 id="解锁手机"><a href="#解锁手机" class="headerlink" title="解锁手机"></a>解锁手机</h2><ol>
<li>将手机关机</li>
<li>长按 <code>电源键</code> 和<code>音量减</code> 进入<code>fastboot</code>模式</li>
<li>用数据线连接手机与电脑<br> <img src="https://ice.frostsky.com/2023/08/22/9d9b6f7bbe3681fd63a68935cec9e8c0.png" alt="9d9b6f7bbe3681fd63a68935cec9e8c0.png"></li>
<li>同意各种东西<br> <img src="https://ice.frostsky.com/2023/08/22/e2e87f9f726f0e5b4ad02076c2115d34.png" alt="e2e87f9f726f0e5b4ad02076c2115d34.png"><br> <img src="https://ice.frostsky.com/2023/08/22/a0ee5a2a1eb9342cdef2dd5f9684ed18.png" alt="a0ee5a2a1eb9342cdef2dd5f9684ed18.png"></li>
<li>待软件显示完成<br> <img src="https://ice.frostsky.com/2023/08/22/d963076a4ee4b2de4d4ec5dad27f6faa.png" alt="d963076a4ee4b2de4d4ec5dad27f6faa.png"><br> <img src="https://ice.frostsky.com/2023/08/22/33d0d5874add7eede4ff1441aeaec225.png" alt="33d0d5874add7eede4ff1441aeaec225.png"></li>
<li>重启手机即可</li>
</ol>
]]></content>
      <categories>
        <category>手机</category>
        <category>搞机</category>
      </categories>
      <tags>
        <tag>ROOT</tag>
        <tag>手机</tag>
        <tag>小米</tag>
        <tag>解锁</tag>
      </tags>
  </entry>
  <entry>
    <title>建站小记</title>
    <url>/2023/06/14/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/%E5%BB%BA%E7%AB%99%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>回想起来，这应该是我写博客的第三年。当初因为学校的社团活动，接触了和网络服务器相关的技术，从建论坛开始，到建博客，一步一步看文档，看教程，从零开始学起。到今天的博客浏览越来越多，我也在考虑许多体验上的问题，以及在实践中发现的问题，经过慎重考虑后决定将博客进行大整改，从原来的 WordPress 换到现在的 Hexo 框架。所以这是新博客的第二篇文章，我打算简单介绍一下博客的设计和使用的工具，当然本文只是个高度概括的玩意，详细的介绍会在以后独立更新。</p>
<p>再说一个题外话，其实本来在七月底就已经全部搞定了，至于为什么会到八月才部署，<del>才，才不会承认是因为某个朋友做了个博客，我因为嫉妒才发布了的呢。才，才不是因为懒狗和打BA托这么久呢</del></p>
<h2 id="期望与目标"><a href="#期望与目标" class="headerlink" title="期望与目标"></a>期望与目标</h2><ul>
<li>争取完善各种功能</li>
<li><del>坚持更新</del></li>
<li><del>坚持不换框架</del></li>
<li>坚持分享新技术</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul>
<li><p>博客的框架是 <a href="https://hexo.io/">Hexo</a></p>
<blockquote>
<p>应该是最流行的静态博客框架了，好处很多，比较轻便，扩展多，工具多，当然了，适配的主题也很多，我个人使用下来还算挺简单的。以后也许会出个喂饭教程？也许吧。</p>
</blockquote>
</li>
<li><p>博客的主题是 <a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p>
<blockquote>
<p>这个主题用的人应该比较多？反正很常见，简单，好看，也有很喂饭的文档，挺适合新手入门的</p>
</blockquote>
</li>
<li><p>评论系统使用的是 <a href="https://waline.js.org/">Waline</a></p>
<blockquote>
<p>算是各种方案里面最简单，还免费的，不过这只是源码，需要自己搭建，官方有完善的文档，使用门槛低</p>
</blockquote>
</li>
<li><p>评论系统的服务器是 <a href="https://vercel.com/">Vercel</a></p>
<blockquote>
<p>提供免费服务的厂商，不过国内有 DNS 污染，需要自己解决一下，或者加 CDN</p>
</blockquote>
</li>
<li><p>评论系统的数据库是 <a href="https://console.leancloud.app/">LeanCloud</a></p>
<blockquote>
<p>建议用国际版的，国内版很麻烦，提供免费的数据库，当然你也可以直接用 Vercel 的</p>
</blockquote>
</li>
<li><p>图床用的是 <a href="https://mjj.today/">MJJ.TODAY</a></p>
<blockquote>
<p>主机论坛的图床，免费，快速，选它的主要原因其实是<code>路过图床</code>挂梯子没法用，<code>SM.MS</code>国内有时抽风，天天坏图</p>
</blockquote>
</li>
</ul>
<h2 id="远端部署"><a href="#远端部署" class="headerlink" title="远端部署"></a>远端部署</h2><p>这里我选择部署在<code>GitHub</code>上，主要还是因为<code>Hexo</code>有一键部署的功能，可以直接一键生成模板，然后用 <code>Action</code> 生成 <code>pages</code>。<br>为了加快国内的访问速度，我用 <code>CloudFlare</code> 反代了 <code>github.io</code> 和<code>评论系统</code>一下</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>新时代电教技能（1） - 获取Windows安装镜像</title>
    <url>/2023/10/09/%E6%96%B0%E6%97%B6%E4%BB%A3%E7%94%B5%E6%95%99%E6%8A%80%E8%83%BD%EF%BC%881%EF%BC%89-%E8%8E%B7%E5%8F%96Windows%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F/%E6%96%B0%E6%97%B6%E4%BB%A3%E7%94%B5%E6%95%99%E6%8A%80%E8%83%BD%EF%BC%881%EF%BC%89-%E8%8E%B7%E5%8F%96windows%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h2 id="前言-序"><a href="#前言-序" class="headerlink" title="前言 - 序"></a>前言 - 序</h2><p>通过本书的学习，你将会掌握最新的系统维护技能<del>（也许？）</del>，当然不是包教包会，我尽量用通俗易懂的方式来解释。</p>
<h2 id="附录-Windows-各个版本的区别"><a href="#附录-Windows-各个版本的区别" class="headerlink" title="附录 - Windows 各个版本的区别"></a>附录 - Windows 各个版本的区别</h2><p>相信你已经被各种版本搞得晕头转向了，这里我简单总结一下各个版本之间的区别。</p>
<h3 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h3><blockquote>
<p>资料来源：<a href="https://www.zhihu.com/question/41293675?utm_id=0">Windows 10 操作系统一共有几个版本，各自有什么区别？</a></p>
</blockquote>
<blockquote>
<p>省流：<code>笔记本</code>还是选<code>家庭版</code>，因为厂家已经帮你买了，不需要自己激活，但是功能有比较大的阉割，比如没有<code>远程桌面</code>，<code>组策略编辑</code>。自己使用的建议<code>专业版</code>，追求稳定的建议<code>企业版</code>，其他奇奇怪怪的版本不建议用。</p>
</blockquote>
<blockquote>
<p>吐槽：<code>专业版</code>还会默认<code>开启</code> <code>BitLocker</code> ，属于花钱找罪受了是，没有特别需求的建议关了，或者将<code>密钥</code>放在连热核武器都破环不了的地方</p>
</blockquote>
<blockquote>
<p>要是你真的闲的没事干，可以看看下面的表</p>
</blockquote>
<p><img src="https://pic1.zhimg.com/d00abed9944caf47229781b5860eef31_r.jpg?source=1940ef5c"><br><img src="https://picx.zhimg.com/941c41be5cb441d5f1aedf5ccc469168_r.jpg?source=1940ef5c"></p>
<h3 id="Windows-11"><a href="#Windows-11" class="headerlink" title="Windows 11"></a>Windows 11</h3><blockquote>
<p>资料来源：<a href="https://zhuanlan.zhihu.com/p/468276000?utm_id=0">Win11系统哪个版本最好 Windows11不同版本的区别有哪些</a></p>
</blockquote>
<blockquote>
<p>省流：和上面一样，不过和10不同11的傻逼版本没那么多了，这里还是建议使用<code>专业版</code>或者<code>企业版</code>，<code>家庭版</code>太鸡肋了。</p>
</blockquote>
<blockquote>
<p>吐槽：11（除了没有这个功能的版本外）的<code>BitLocker</code>默认是开的，而且<code>没有</code>备份<code>密钥</code>！<code>没有</code>备份<code>密钥</code>！<code>没有</code>备份<code>密钥</code>！记得去备份！！！</p>
</blockquote>
<ul>
<li>Win11家庭版（Windows11Home）：<br>对于家庭用户，不能加入<code>ActiveDirectory</code>和<code>AzureAD</code>，不支持<code>远程连接</code>。家庭中文版和单语版针对OEM设备，是家庭版的两个分支。</li>
<li>Win11专业版（Windows11Pro）：<br>供小企业使用。在家庭版的基础上，增加了<code>域账号</code>加入、<code>Bitlocker加密</code>、<code>远程连接支持</code>、<code>企业存储</code>等功能。建议普通用户首选。</li>
<li>Win11企业版（Windows11企业版）：<br>大中型企业使用。在专业版的基础上，增加了<code>DirectAccess</code>、<code>AppLocker</code>等高级企业功能。</li>
<li>Win11教育版（Windows11教育版）：<br>学校（教职工、管理员、教师、学生）使用。其功能与企业版几乎相同，但<code>仅授权给学校或教育机构</code>。</li>
</ul>
<h2 id="方案一-官方下载网页"><a href="#方案一-官方下载网页" class="headerlink" title="方案一 - 官方下载网页"></a>方案一 - 官方下载网页</h2><ul>
<li>优点：简单，不需要选择（没得选择）。时间短，因为就下载需要时间</li>
<li>缺点：版本可能比较老？不集成补丁。开机可能需要进行一下更新</li>
</ul>
<p>地址：<a href="https://www.microsoft.com/zh-cn/software-download/windows11">Windows 11</a><br>打开这玩意就会看到这三个选项，第一个是给旧电脑在线升级用的，第二个是用来创建启动U盘的，第三个是用来下载镜像的，这里我们看第三个。<br><img src="https://i.mji.rip/2023/10/09/8f85544fd1ff8f7004a20fd10cb991aa.png"><br>这里有两个版本可以选择<br><img src="https://i.mji.rip/2023/10/09/c39718b3d4431c67249d4677095d8315.png"></p>
<h3 id="附录-Windows-11（multi-edition-ISO）包括哪些版本的系统？"><a href="#附录-Windows-11（multi-edition-ISO）包括哪些版本的系统？" class="headerlink" title="附录 - Windows 11（multi-edition ISO）包括哪些版本的系统？"></a>附录 - Windows 11（multi-edition ISO）包括哪些版本的系统？</h3><blockquote>
<p>资料参考：<a href="https://zhuanlan.zhihu.com/p/469352024">Windows 11（multi-edition ISO）包括哪些版本的系统？</a></p>
</blockquote>
<p> <img src="https://pic1.zhimg.com/80/v2-dc858f5499d64ee2f19a894b126be9dc_720w.webp"></p>
<h3 id="下载中文家庭版"><a href="#下载中文家庭版" class="headerlink" title="下载中文家庭版"></a>下载中文家庭版</h3><p>选择<code>家庭版</code><br><img src="https://i.mji.rip/2023/10/09/c39718b3d4431c67249d4677095d8315.png" alt="c39718b3d4431c67249d4677095d8315.png"><br>虽然但是只有一种语言也需要选<br><img src="https://i.mji.rip/2023/10/09/ff52023c0edccd735e421e61a6ccc5ce.png"><br>这是镜像的大小<br><img src="https://i.mji.rip/2023/10/09/f99c8190a4f8bf7be84ed3d4d5394f07.png" alt="f99c8190a4f8bf7be84ed3d4d5394f07.png"></p>
<h3 id="下载多版本集合版"><a href="#下载多版本集合版" class="headerlink" title="下载多版本集合版"></a>下载多版本集合版</h3><p> 选择<code>多版本集合版</code><br><img src="https://i.mji.rip/2023/10/09/c39718b3d4431c67249d4677095d8315.png" alt="c39718b3d4431c67249d4677095d8315.png"><br>选择需要的语言<br><img src="https://i.mji.rip/2023/10/09/a39905d29b177f30c401945404cf1792.png" alt="a39905d29b177f30c401945404cf1792.png"><br>这是下载镜像的大小<br><img src="https://i.mji.rip/2023/10/09/aa613408f1e68aa6f4394e7093d4ad01.png" alt="aa613408f1e68aa6f4394e7093d4ad01.png"></p>
<h2 id="方案二-UUP-Dump"><a href="#方案二-UUP-Dump" class="headerlink" title="方案二 - UUP Dump"></a>方案二 - UUP Dump</h2><ul>
<li>优点：版本非常全，因为是检索微软官方的服务器，你甚至可找到每一次的补丁更新。各种发布通道的包都有。</li>
<li>缺点：下载来的是个cmd脚本，需要自己在本地跑，会自动下载需要的文件，然后打包成镜像，需要大概45分钟。</li>
</ul>
<p>这个是 不忘初心 的镜像站 <a href="https://www.uupdump.cn/">国内镜像地址</a><br>这个是 项目的官方站 <a href="https://www.uupdump.net/">国外原站地址</a></p>
<p>首页看到的是这样的界面，不用着急，跟着我来操作<br><img src="https://i.mji.rip/2023/10/09/f1971888fabece7f910f2e31c3ce89dd.png" alt="f1971888fabece7f910f2e31c3ce89dd.png"><br>在搜索框下面找到 <code>windows 11</code>，然后选择需要的版本，这里我们选最新的 <code>23H2</code> 稳定版，（没有后缀的是稳定版），当然你需要体验最新的功能也可以选择其他内测或者开发版本<br><img src="https://i.mji.rip/2023/10/09/5e01e848415716e7ecd4301707dfdd3c.png" alt="5e01e848415716e7ecd4301707dfdd3c.png"><br>这里选具体的版本，这里需要注意，中间的体系架构，一般的电脑选择 <code>x64</code>，如果你的设备使用的是<code>arm</code>架构的处理器，请选择<code>arm</code>，这里的 <code>x64</code> 有两个可以选择 第一个这样子的命名是积累更新，我们需要的不是这个，我们选择另一个。<br><img src="https://i.mji.rip/2023/10/09/616009cd3315cd62926132943a01e454.png" alt="616009cd3315cd62926132943a01e454.png"><br>然后这里选择语言，选择好了之后点下一步<br><img src="https://i.mji.rip/2023/10/09/59f63fbbb9b6c9cc68ec7f875f09b646.png" alt="59f63fbbb9b6c9cc68ec7f875f09b646.png"><br>这里选择版本，有<code>家庭版</code>，<code>家庭中文版</code>，<code>专业版</code>，和一个我不知道也查不出来的玩意，右边可以看到虚拟升级的版本，如果你有需要，请在这一步选择对应的版本，虚拟升级在下一步会有，这里我们选择<code>专业版</code>，然后点击下一步。<br><img src="https://i.mji.rip/2023/10/09/0edd5f5f4f73fd0f655fd21fa146fe1a.png" alt="0edd5f5f4f73fd0f655fd21fa146fe1a.png"><br>就进入到这看起来花里胡哨的界面，我们分开一部分一部分来看<br><img src="https://i.mji.rip/2023/10/09/5b14d4120ca234b92dca94c3b2571c4e.png" alt="5b14d4120ca234b92dca94c3b2571c4e.png"><br>首先是左上角，<code>下载方式</code>，第一个没啥子用，第三个与第二个相比会多出创建虚拟版本的一步，如果有相关需求的可以选这个。<br><img src="https://i.mji.rip/2023/10/09/0010f6248ebaa6c1e618a9c4dd0bdfe3.png" alt="0010f6248ebaa6c1e618a9c4dd0bdfe3.png"><br>前面两个是默认勾选的，后面两个建议不要勾，第三个可以安装完系统之后再装，现在集成会严重拖慢封包速度。<br><img src="https://i.mji.rip/2023/10/09/724652d579557ff739e128e9484227ac.png" alt="724652d579557ff739e128e9484227ac.png"><br>这个就是选择第三个之后的多出来的玩意<br><img src="https://i.mji.rip/2023/10/09/d016dac21de5c0219cdab1e1aa05dcec.png" alt="d016dac21de5c0219cdab1e1aa05dcec.png"><br>右边是一些没啥用的玩意<br><img src="https://i.mji.rip/2023/10/09/6d250b4a0110cab917dfe23cea1a83f2.png" alt="6d250b4a0110cab917dfe23cea1a83f2.png"><br>然后点击下载就会开始下载这样一个脚本压缩包<br><img src="https://i.mji.rip/2023/10/09/db438bf45e83516cb170a691daf98e70.png" alt="db438bf45e83516cb170a691daf98e70.png"><br>得到一个压缩包<br><img src="https://i.mji.rip/2023/10/09/55debb300fe6ccb1adb96129da3ab8bc.png" alt="55debb300fe6ccb1adb96129da3ab8bc.png"><br>解压之后得到一堆玩意，注意看三个<code>uup_dowmload_xxxxx</code>，根据自己的系统类型进行选择<br><img src="https://i.mji.rip/2023/10/09/4050d4907c3aa0e7d0f7813ffefdab46.png" alt="4050d4907c3aa0e7d0f7813ffefdab46.png"><br>双击运行脚本，会先下载<code>aria2</code>，这是一个开源的强大的下载器<br><img src="https://i.mji.rip/2023/10/09/4f606ab0f88885ee7413d6c26ada6197.png" alt="4f606ab0f88885ee7413d6c26ada6197.png"><br>然后会下载<code>7z</code>，这是开源的强大的解压缩软件<br><img src="https://i.mji.rip/2023/10/09/ecd46aebbda68e83ee0cbcb0ac2dbef8.png" alt="ecd46aebbda68e83ee0cbcb0ac2dbef8.png"><br>然后就开始下载各种组件<br><img src="https://i.mji.rip/2023/10/09/dfa0a86c30460ff6f0539f132c5fd8e8.png" alt="dfa0a86c30460ff6f0539f132c5fd8e8.png"><br><img src="https://i.mji.rip/2023/10/09/e694ef170ee75f197c1c3e721a0d2f7d.png" alt="e694ef170ee75f197c1c3e721a0d2f7d.png"><br>将组件封装成镜像<br><img src="https://i.mji.rip/2023/10/09/5589a4b9f0741fe95cf2892e959fdb98.png" alt="5589a4b9f0741fe95cf2892e959fdb98.png"><br><img src="https://i.mji.rip/2023/10/09/e8fd59378895ed246e707070082ba766.png" alt="e8fd59378895ed246e707070082ba766.png"><br>脚本跑完，按0退出<br><img src="https://i.mji.rip/2023/10/09/6ce90907e0be9f9aeffa96ae3d2427b5.png" alt="6ce90907e0be9f9aeffa96ae3d2427b5.png"><br>笔者跑完全部用了40分钟，（cpu是amd的7900）<br><img src="https://i.mji.rip/2023/10/09/53f51342a39872cf2b4f5e7d992648de.png" alt="53f51342a39872cf2b4f5e7d992648de.png"><br>在刚刚的目录下得到了封装好的镜像<br><img src="https://i.mji.rip/2023/10/09/6d3bb5c339ea04d71a91657988e032b7.png" alt="6d3bb5c339ea04d71a91657988e032b7.png"></p>
<h2 id="方案三-第三方博客"><a href="#方案三-第三方博客" class="headerlink" title="方案三 - 第三方博客"></a>方案三 - 第三方博客</h2><blockquote>
<p>写在前面：我不推荐使用这些方法下载镜像，因为不能保证有没有被别人动过手脚。但仍然在这里写出来的这些我认为目前来看还是可信的</p>
</blockquote>
<h3 id="不忘初心博客-精简版系统官网"><a href="#不忘初心博客-精简版系统官网" class="headerlink" title="不忘初心博客-精简版系统官网"></a><a href="https://www.pc528.net/">不忘初心博客-精简版系统官网</a></h3><p>这个主要发布的是<code>精简版系统</code>，建议在老机器上使用，新机器没有必要，而且因为精简的原因可能会导致一些软件用不了，这些需要慎重考虑。<br><img src="https://i.mji.rip/2023/10/09/db90fa7b7bcc2e34086b81d2428c18c2.png" alt="db90fa7b7bcc2e34086b81d2428c18c2.png"></p>
<h3 id="NEXT-ITELLYOU"><a href="#NEXT-ITELLYOU" class="headerlink" title="NEXT, ITELLYOU"></a><a href="https://next.itellyou.cn/">NEXT, ITELLYOU</a></h3><p>老牌系统下载站的新站，不过<code>需要登陆</code>使用，可能是考虑到滥用和攻击的问题<br><img src="https://i.mji.rip/2023/10/09/d1622f8f14b6b5fc626c9c42baa7f644.png" alt="d1622f8f14b6b5fc626c9c42baa7f644.png"></p>
<h3 id="MSDN-我告诉你-做一个安静的工具站"><a href="#MSDN-我告诉你-做一个安静的工具站" class="headerlink" title="MSDN, 我告诉你 - 做一个安静的工具站"></a><a href="https://msdn.itellyou.cn/">MSDN, 我告诉你 - 做一个安静的工具站</a></h3><p>上面那个玩意的旧站，目前只有10和以下的镜像，11和以后的在新站<br><img src="https://i.mji.rip/2023/10/09/f5d87e3b1cf62f26ee481a109dd0f2c2.png" alt="f5d87e3b1cf62f26ee481a109dd0f2c2.png"></p>
]]></content>
      <categories>
        <category>电教技能</category>
      </categories>
      <tags>
        <tag>电教技能</tag>
        <tag>获取Windows安装镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈平板与生产力</title>
    <url>/2024/01/10/%E6%B5%85%E8%B0%88%E5%B9%B3%E6%9D%BF%E4%B8%8E%E7%94%9F%E4%BA%A7%E5%8A%9B/%E6%B5%85%E8%B0%88%E5%B9%B3%E6%9D%BF%E4%B8%8E%E7%94%9F%E4%BA%A7%E5%8A%9B/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>距离第一代 ipad 发布已经过去了超过13年，平板这个品类当年的产品定位是介于手机与电脑之间的一种大屏娱乐工具，当年的<a href="https://www.apple.com.cn/newsroom/2010/01/27Apple-Launches-iPad/">新闻稿</a>也是这么写的。</p>
<blockquote>
<p>旧金山，2010 年 1 月 27 日 - Apple® 今天推出了 iPad - 一款用于浏览网页、阅读和发送电子邮件、欣赏照片、观看视频、聆听音乐、玩游戏、阅读电子图书等功能的革命性产品。</p>
</blockquote>
<p>而生产力这个词第一次在平板上提出似乎是 <a href="https://www.apple.com.cn/newsroom/2016/03/21Apple-Introduces-9-7-inch-iPad-Pro/">iPad Pro</a> ?。虽然大家认为是这样，但我个人认为是微软2012年发布的 Surface Rt 。关于生产力的讨论我们暂且放在一边，先来看看平板发展了这么多年，定位有什么改变。</p>
<h2 id="界线"><a href="#界线" class="headerlink" title="界线"></a>界线</h2><p>从电脑出现到手机出现，直到现在大家都理所当然地认为这是两个不同的类别。从基本的交互逻辑，到软件生态，它们之间都有着一条不可逾越的界线。电脑，无论形态如何，都是以键盘鼠标为代表的基本交互，而图形化界面甚至软件也是为这种操作特化的，手机，天生就是为触控使用而生的。在使用电脑的时候，我们往往追求更大的屏幕，因为可以同时看更多的窗口，而在手机上不一样，屏幕的尺寸限制了我们最多只能同时看两个窗口，否则就会因为窗口太小，内容压缩得只剩控件了。它们可以说是两个极端，但是，有位仁兄瞄准了这个绝对领域，提出了自己的看法。<br>平板，或者说平板电脑这一个种类的产品在乔布斯之前早已出现，那个时期应该叫平板电脑，平板形态的电脑，交互体验是非常糟糕的。而 iPad 出现之后，使用触屏交互才让体验好了不少，与之而来的问题是，这和手机有什么区别，除了屏幕大点以外。平板正是这条界线上的模糊地带，一样的形态可以拥有不同的操作逻辑，甚至还有自己的操作逻辑，比如，各种 pen 。这使得我们无论试图以任何一种标准来看待这种产品都是不合适的。</p>
<h2 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h2><p>有人说性能就是生产力，那其实大部分平板的性能可以完爆前几年的轻薄本几条街，这个不是必要条件。我们讨论生产力是在什么时候？工作的时候。我们从事的大部分工作都是键盘，鼠标，笔，为基础的，而这些严肃的工作，往往有着固定的工作流和软件，这是不可撼动的地位。当然我们不能严格要求这么多，要是个人使用的话，其实往往很随意，只要这玩意可以完成一定的工作，就可以说有生产力。但是，我个人给出的标准是，可以替代我正在使用的标准软件，我在电脑上使用 Word ，在平板上也可以使用 Word ，而且在接入键盘和鼠标的情况下和电脑一样。</p>
<h2 id="附属品"><a href="#附属品" class="headerlink" title="附属品"></a>附属品</h2><p>关于生产力的讨论是没有必要的，相信绝大多数使用者都是个人，因为如果是采购的话没我们今天讨论那么多事，人家有自己的使用场景。作为个人使用，说实话，我个人认为是一个附属品，在电脑需要进行触摸相关操作时，作为电脑的副屏，在手机需要更大的屏幕进行查看，或者需要多窗口是，当作手机的副屏，其实仔细想想现在各大厂商出的互联功能也是这个意思。</p>
<h2 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h2><p>这个用途应该是从电子书上来的，也是笔所赋予平板的最后一个优势，毕竟无纸化的口号喊得很响啊。但工作流还是一样的稀烂，暂且不说有没有一个厂商的平板自带这些功能，几乎没有一个厂商从学生的角度考虑过使用的体验。</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>随想</category>
      </categories>
      <tags>
        <tag>平板</tag>
        <tag>生产力</tag>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>编译VS解释</title>
    <url>/2023/09/21/%E7%BC%96%E8%AF%91VS%E8%A7%A3%E9%87%8A/%E7%BC%96%E8%AF%91vs%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>部分内容由<code>CodeGeeX</code>智能生成，请注意鉴别真实性</p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>其实不只我自己，很多人，包括很多初学者，在网上看视频课程的时候，每一门语言的开头介绍里面，都会讲到这么语言是编译型的还是解释型的，然后会举出一些例子，比如：</p>
<ul>
<li>编译型语言：C语言、C++语言、Java语言、C#语言、Go语言、Rust语言、Swift语言</li>
<li>解释型语言：JavaScript语言、Python语言、PHP语言、Ruby语言</li>
</ul>
<p>这不就是放屁吗，索性趁着今天闲的没事干，就来好好扒一下这个内容，顺便再水一篇文章</p>
<h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h2>]]></content>
      <categories>
        <category>计算机</category>
        <category>算法 &amp; 原理</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>C语言</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
</search>
